<?php

declare(strict_types=1);

namespace App\Tests\Backoffice\TrafficPoliceBooth\Application\Delete;

use App\Backoffice\TrafficPoliceBooth\Application\Delete\TrafficPoliceBoothDeleter;
use App\Backoffice\TrafficPoliceBooth\Domain\Exception\TrafficPoliceBoothNotExist;
use App\Backoffice\TrafficPoliceBooth\Domain\TrafficPoliceBooth;
use App\Tests\Backoffice\TrafficPoliceBooth\Domain\TrafficPoliceBoothMother;
use App\Tests\Backoffice\TrafficPoliceBooth\TrafficPoliceBoothModuleUnitTestCase;
use App\Tests\Shared\Domain\UuidMother;

final class TrafficPoliceBoothDeleteTest extends TrafficPoliceBoothModuleUnitTestCase
{
	private TrafficPoliceBoothDeleter $deleter;
	
	private TrafficPoliceBooth $trafficPoliceBooth;
	
	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		
		$this->deleter = new TrafficPoliceBoothDeleter($this->repository());
		
		$this->trafficPoliceBooth =  TrafficPoliceBoothMother::random();
	}
	
	/** @test */
	public function it_should_delete_an_existing_traffic_police_booth(): void
	{
		$this->shouldFind($this->trafficPoliceBooth->getId(),$this->trafficPoliceBooth);
		
		$this->repository()
			->shouldReceive('delete')
			->once()
			->with($this->similarTo($this->trafficPoliceBooth));
		
		$this->deleter->__invoke($this->trafficPoliceBooth->getId());
	}
	
	/** @test */
	public function it_should_throw_an_exception_when_the_traffic_police_booth_does_not_exit(): void
	{
		$this->expectException(TrafficPoliceBoothNotExist::class);
		
		$this->shouldNotFind($this->trafficPoliceBooth->getId());
		
		$this->repository()
			->shouldReceive('delete')
			->never();
		
		$this->deleter->__invoke($this->trafficPoliceBooth->getId());
	}
	
}