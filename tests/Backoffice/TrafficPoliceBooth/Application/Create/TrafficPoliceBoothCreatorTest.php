<?php

declare(strict_types=1);

namespace App\Tests\Backoffice\TrafficPoliceBooth\Application\Create;

use App\Backoffice\TrafficPoliceBooth\Domain\Exception\NonUniqueTagDescription;
use App\Backoffice\TrafficPoliceBooth\Domain\TrafficPoliceBooth;
use App\Backoffice\TrafficPoliceBooth\Application\Create\TrafficPoliceBoothCreator;
use App\Backoffice\TrafficPoliceBooth\Domain\Exception\NonUniqueTrafficPoliceBoothDescription;
use App\Tests\Backoffice\TrafficPoliceBooth\Domain\TrafficPoliceBoothMother;
use App\Tests\Backoffice\TrafficPoliceBooth\TrafficPoliceBoothModuleUnitTestCase;
use App\Tests\Shared\Domain\UuidMother;
use App\Tests\Shared\Domain\WordMother;
use InvalidArgumentException;
use App\Backoffice\TrafficPoliceBooth\Application\Create\TagCreator;


final class TrafficPoliceBoothCreatorTest extends TrafficPoliceBoothModuleUnitTestCase
{
	private TrafficPoliceBoothCreator $creator;
	private TrafficPoliceBooth $trafficPoliceBooth;
	
	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		
		$this->creator = new TrafficPoliceBoothCreator($this->repository(),$this->uniqueTrafficPoliceBoothDescriptionSpecification(),$this->bus());
		
		$this->trafficPoliceBooth = TrafficPoliceBoothMother::random();
	}
	
	/** @test */
    public function it_should_create_a_valid_traffic_police_booth(): void
    {
	    $this->shouldBeAnUniqueTrafficPoliceBoothDescription($this->trafficPoliceBooth->getDescription());
	
	    $this->shouldSave($this->trafficPoliceBooth);
	
	    $this->bus();
	    
	    $this->bus->shouldReceive('publish')->once()->andReturnNull();		    ;
	    
	    $this->creator->__invoke($this->trafficPoliceBooth->getId(),$this->trafficPoliceBooth->getDescription());
    }
    
    /** @test */
    public function it_should_throw_an_exception_when_the_description_is_in_use(): void
    {
	    $this->expectException(NonUniqueTrafficPoliceBoothDescription::class);
	    
	    $this->shouldBeNonUniqueTrafficPoliceBoothDescription($this->trafficPoliceBooth->getDescription());
	    
	    $this->shouldNotSave();
	
	    $this->shouldNotPublish();
	
	    $this->creator->__invoke($this->trafficPoliceBooth->getId(),$this->trafficPoliceBooth->getDescription());
    }
    
    /** @test */
    public function it_should_throw_an_exception_when_the_id_is_not_valid(): void
    {
	    $this->expectException(InvalidArgumentException::class);
	
	    $this->shouldNotSave();
	    
	    $this->shouldNotPublish();
	
	    $this->creator->__invoke(UuidMother::invalid(),WordMother::random());
    }
}

