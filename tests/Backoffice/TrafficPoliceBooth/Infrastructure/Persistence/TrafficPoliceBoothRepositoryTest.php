<?php

declare(strict_types=1);

namespace App\Tests\Backoffice\TrafficPoliceBooth\Infrastructure\Persistence;

use App\Shared\Domain\ValueObject\Uuid;
use App\Tests\Backoffice\TrafficPoliceBooth\Domain\TrafficPoliceBoothMother;
use App\Backoffice\TrafficPoliceBooth\Domain\TrafficPoliceBooth;
use App\Tests\Backoffice\TrafficPoliceBooth\TrafficPoliceBoothInfrastructureTestCase;
use App\Tests\Shared\Domain\Criteria\CriteriaMother;


final class TrafficPoliceBoothRepositoryTest extends TrafficPoliceBoothInfrastructureTestCase
{
	private TrafficPoliceBooth $trafficPoliceBooth;

	private Uuid $id;
	
	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		
		$this->trafficPoliceBooth =  TrafficPoliceBoothMother::random();
		
		$this->id = new Uuid($this->trafficPoliceBooth->getId());
	}
	
	/** @test */
	public function it_should_save_a_traffic_police_booth(): void
    {
	    $this->repository()->save($this->trafficPoliceBooth);
	    
	    $this->clearUnitOfWork();
	    
	    $this->assertNotNull($this->repository()->search($this->id));
    }

    /** @test */
    public function it_should_return_an_existing_traffic_police_booth(): void
    {
        $this->repository()->save($this->trafficPoliceBooth);
	
	    $this->clearUnitOfWork();
	
	    $tagFound = $this->repository()->search($this->id);
	
	    $this->assertNull(
	        $this->assertSimilar($this->trafficPoliceBooth,$tagFound)
	    );
    }

    /** @test */
    public function it_should_not_return_a_non_existing_traffic_police_booth(): void
    {
        $this->assertNull(
        	$this->repository()->search($this->id)
        );
    }
	
	/** @test */
    public function it_should_delete_an_existing_author()
    {
	    $this->repository()->save($this->trafficPoliceBooth);
	    
	    $this->clearUnitOfWork();
	
	    $tagFound = $this->repository()->search($this->id);
	
	    $this->assertNull(
	    	$this->repository()->delete($tagFound)
	    );
    }
	
	
	/** @test */
	public function it_should_search_all_existing_author(): void
	{
		$existingAuthor        = TrafficPoliceBoothMother::random();
		$anotherExistingAuthor = TrafficPoliceBoothMother::random();
		$existingAuthors       = [$existingAuthor, $anotherExistingAuthor];
		
		$this->repository()->save($existingAuthor);
		$this->repository()->save($anotherExistingAuthor);
		$this->clearUnitOfWork();
		
		$this->assertEquals(
			count($existingAuthors),
			count($this->repository()->searchAll())
		);
	}
	
	/** @test */
	public function it_should_search_all_existing_authors_with_an_empty_criteria(): void
	{
		$existingTag        = TrafficPoliceBoothMother::random();
		$anotherExistingTag = TrafficPoliceBoothMother::random();
		$existingTags       = [$existingTag, $anotherExistingTag];
		
		$this->repository()->save($existingTag);
		$this->repository()->save($anotherExistingTag);
		$this->clearUnitOfWork();
		
		$this->assertEquals(
			count($existingTags),
			count($this->repository()->matching(CriteriaMother::empty()))
		);
	}
	
	/** @test */
	public function it_should_filter_by_criteria(): void
	{
		$dddInPhpTag  = TrafficPoliceBoothMother::randomWithDescription('DDD en PHP');
		$dddInJavaTag = TrafficPoliceBoothMother::randomWithDescription('DDD en Java');
		$intellijTag  = TrafficPoliceBoothMother::randomWithDescription('Exprimiendo Intellij');
		$dddAuthors   = [$dddInPhpTag, $dddInJavaTag];
		
		$fullNameContainsDddCriteria = CriteriaMother::contains('description','DDD');
		
		$this->repository()->save($dddInJavaTag);
		$this->repository()->save($dddInPhpTag);
		$this->repository()->save($intellijTag);
		$this->clearUnitOfWork();
		
		$this->assertEquals(
			count($dddAuthors),
			count($this->repository()->matching($fullNameContainsDddCriteria))
		);
		
	}
	
	
}
