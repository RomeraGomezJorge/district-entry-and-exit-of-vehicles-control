<?php
	
	declare(strict_types=1);
	
	namespace App\Tests\Backoffice\User\Application\Update;
	
	
	use App\Backoffice\Role\Domain\Exception\RoleNotExist;
	use App\Backoffice\TrafficPoliceBooth\Domain\Exception\TrafficPoliceBoothNotExist;
	use App\Backoffice\User\Application\Update\UserUpdater;
	use App\Backoffice\User\Domain\Exception\NonUniqueUserEmail;
	use App\Backoffice\User\Domain\Exception\NonUniqueUserName;
	use App\Backoffice\User\Domain\Exception\UserNotExist;
	use App\Backoffice\User\Domain\User;
	use App\Tests\Backoffice\User\Domain\UserMother;
	use App\Tests\Backoffice\User\UserModuleUnitTestCase;
	use App\Tests\Shared\Domain\EmailMother;
	use App\Tests\Shared\Domain\UuidMother;
	use App\Tests\Shared\Domain\WordMother;
	use InvalidArgumentException;
	
	final class UserUpdateTest extends UserModuleUnitTestCase
	{
		private UserUpdater $updater;
		private User $user;
		
		protected function setUp(): void
		{
			parent::setUp(); // TODO: Change the autogenerated stub
			
			$this->updater = new UserUpdater(
				$this->repository(),
				$this->roleRepository(),
				$this->trafficPoliceBoothRepository(),
				$this->uniqueUserNameSpecification(),
				$this->uniqueUserEmailSpecification()
			);
			
			$this->user = userMother::random();
		}
		
		/** @test */
		public function it_should_update_an_existing_when_user_name_is_change(): void
		{
			$newUserName = WordMother::random();
			
			$this->shouldBeAnUniqueUserName($newUserName);
			
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldFindATrafficPoliceBooth(
				$this->user->getTrafficPoliceBooth()->getId(),
				$this->user->getTrafficPoliceBooth()
			);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldSave($this->user);
			
			$this->updater->__invoke(
				$this->user->getId(),
				$newUserName,
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
		}
		
		/** @test */
		public function it_should_not_update_an_existing_user_name_if_it_does_not_change(): void
		{
			$this->uniqueUserNameSpecification()
				->shouldReceive('isSatisfiedBy')
				->never();
			
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldFindATrafficPoliceBooth(
				$this->user->getTrafficPoliceBooth()->getId(),
				$this->user->getTrafficPoliceBooth()
			);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldSave($this->user);
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
			
		}
		
		/** @test */
		public function it_should_update_an_existing_when_email_is_change(): void
		{
			$newEmail = EmailMother::random();
			
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldFindATrafficPoliceBooth(
				$this->user->getTrafficPoliceBooth()->getId(),
				$this->user->getTrafficPoliceBooth()
			);
			
			$this->shouldBeAnUniqueEmail($newEmail);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldSave($this->user);
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$newEmail,
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
		}
		
		/** @test */
		public function it_should_not_update_an_existing_email_if_it_does_not_change(): void
		{
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldFindATrafficPoliceBooth(
				$this->user->getTrafficPoliceBooth()->getId(),
				$this->user->getTrafficPoliceBooth()
			);
			
			$this->uniqueUserEmailSpecification()
				->shouldReceive('isSatisfiedBy')
				->never();
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldSave($this->user);
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
			
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_user_does_not_exit(): void
		{
			$this->expectException(UserNotExist::class);
			
			$this->shouldNotFind($this->user->getId());
			
			$this->shouldNotSave();
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
			
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_user_name_is_in_use(): void
		{
			$usernameInUse = WordMother::random();
			
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldFindATrafficPoliceBooth(
				$this->user->getTrafficPoliceBooth()->getId(),
				$this->user->getTrafficPoliceBooth()
			);
			
			$this->expectException(NonUniqueUserName::class);
			
			$this->shouldBeNonUniqueUserName($usernameInUse);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldNotSave();
			
			$this->updater->__invoke(
				$this->user->getId(),
				$usernameInUse,
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
			
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_email_is_in_use(): void
		{
			$emailInUse = EmailMother::random();
			
			$this->expectException(NonUniqueUserEmail::class);
			
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldFindATrafficPoliceBooth(
				$this->user->getTrafficPoliceBooth()->getId(),
				$this->user->getTrafficPoliceBooth()
			);
			
			$this->shouldBeNonUniqueEmail($emailInUse);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldNotSave();
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$emailInUse,
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_id_is_not_valid(): void
		{
			$this->expectException(\InvalidArgumentException::class);
			
			$this->shouldNotSave();
			
			$this->updater->__invoke(
				UuidMother::invalid(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_role_id_is_not_found(): void
		{
			$roleIdDoesNotExist = 'dontExit';
			
			$this->expectException(RoleNotExist::class);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldNotFindARole($roleIdDoesNotExist);
			
			$this->shouldNotSave();
			
			$this->shouldNotPublish();
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$roleIdDoesNotExist,
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_traffic_police_booth_id_is_not_found(): void
		{
			$this->expectException(TrafficPoliceBoothNotExist::class);
			
			$this->shouldFind($this->user->getId(), $this->user);
			
			$this->shouldFindARole(
				$this->user->getRole()->getId(),
				$this->user->getRole()
			);
			
			$this->shouldNotFindATrafficPoliceBooth($this->user->getTrafficPoliceBooth()->getId());
			
			$this->shouldNotSave();
			
			$this->shouldNotPublish();
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$this->user->getEmail(),
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId()
			);
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_email_is_not_valid(): void
		{
			$this->expectException(InvalidArgumentException::class);
			
			$this->shouldNotSave();
			
			$this->shouldNotPublish();
			
			$invalidEmail = WordMother::random();
			
			$this->updater->__invoke(
				$this->user->getId(),
				$this->user->getUsername(),
				$this->user->getName(),
				$this->user->getSurname(),
				$invalidEmail,
				$this->user->getRole()->getId(),
				$this->user->getIsActive(),
				$this->user->getTrafficPoliceBooth()->getId());
		}
	}

