<?php

declare(strict_types=1);

namespace App\Tests\Backoffice\District\Application\Update;

use App\Backoffice\District\Application\Update\DistrictUpdater;
use App\Backoffice\District\Domain\Exception\NonUniqueDistrictDescription;
use App\Backoffice\District\Domain\Exception\DistrictNotExist;
use App\Backoffice\District\Domain\District;
use App\Tests\Backoffice\District\Domain\DistrictMother;
use App\Tests\Backoffice\District\DistrictModuleUnitTestCase;
use App\Tests\Shared\Domain\UuidMother;
use App\Tests\Shared\Domain\WordMother;
use InvalidArgumentException;


final class DistrictUpdaterTest extends DistrictModuleUnitTestCase
{
	private DistrictUpdater $updater;
	
	private District $District;
	
	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		
		$this->updater = new DistrictUpdater($this->repository(),$this->uniqueDistrictDescriptionSpecification());
		
		$this->District = DistrictMother::random();
	}
	
	/** @test */
    public function it_should_update_an_existing_when_description_is_change(): void
    {
    	$newDescription = WordMother::random();

	    $this->shouldBeAnUniqueDistrictDescription($newDescription);

	    $this->shouldFind($this->District->getId(),$this->District);

	    $this->shouldSave($this->District);

	    $this->updater->__invoke($this->District->getId(),$newDescription);
    }

	/** @test */
	
    public function it_should_not_update_an_existing_description_if_it_does_not_change(): void
    {
	    $this->uniqueDistrictDescriptionSpecification()
		    ->shouldReceive('isSatisfiedBy')
		    ->never();

	    $this->shouldFind($this->District->getId(),$this->District);

	    $this->shouldSave($this->District);

	    $this->updater->__invoke($this->District->getId(),$this->District->getDescription());
    }

	/** @test */
    public function it_should_throw_an_exception_when_the_district_does_not_exit(): void
    {
	    $this->expectException(DistrictNotExist::class);

	    $this->shouldNotFind($this->District->getId());

	    $this->shouldNotSave();

	    $this->updater->__invoke($this->District->getId(),$this->District->getDescription());
    }

    /** @test */
    public function it_should_throw_an_exception_when_the_description_is_in_use(): void
    {
    	$descriptionInUse = WordMother::random();

	    $this->expectException(NonUniqueDistrictDescription::class);

	    $this->shouldBeNonUniqueDistrictDescription($descriptionInUse);

		$this->shouldFind($this->District->getId(),$this->District);

	    $this->shouldNotSave();

	    $this->updater->__invoke($this->District->getId(),$descriptionInUse);
    }

    /** @test */
    public function it_should_throw_an_exception_when_the_id_is_not_valid(): void
    {
	    $this->expectException(InvalidArgumentException::class);

	    $this->shouldNotSave();

	    $this->updater->__invoke(UuidMother::invalid(),$this->District->getDescription());
    }
}

